// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id @default(cuid())
  email                 String               @unique
  password              String?              // null for social auth users
  name                  String?
  image                 String?
  emailVerified         DateTime?
  credits               Int                  @default(50) // 50 free credits for new users
  tier                  SubscriptionTier     @default(FREE)
  stripeCustomerId      String?              @unique
  
  // Social auth fields
  googleId              String?              @unique
  facebookId            String?              @unique
  wechatId              String?              @unique
  
  // Rate limiting fields
  apiCallsThisHour      Int                  @default(0)
  lastApiCallReset      DateTime?
  
  // Storage tracking
  storageUsed           BigInt               @default(0) // in bytes
  
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  
  // Relations
  accounts              Account[]
  sessions              Session[]
  creditTransactions    CreditTransaction[]
  payments              Payment[]
  subscriptions         Subscription[]
  
  @@map("users")
}

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refresh_token         String? @db.Text
  access_token          String? @db.Text
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String? @db.Text
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model CreditTransaction {
  id          String            @id @default(cuid())
  userId      String
  amount      Int               // positive for additions, negative for deductions
  type        TransactionType
  description String
  metadata    Json?             // operation details, payment info, etc.
  createdAt   DateTime          @default(now())
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("credit_transactions")
}

model Payment {
  id                  String        @id @default(cuid())
  userId              String
  stripePaymentId     String        @unique
  stripeSessionId     String?       @unique
  amount              Int           // amount in cents
  currency            String        @default("usd")
  status              PaymentStatus @default(PENDING)
  creditsGranted      Int
  metadata            Json?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model Subscription {
  id                  String             @id @default(cuid())
  userId              String
  stripeSubscriptionId String            @unique
  tier                SubscriptionTier
  status              SubscriptionStatus @default(ACTIVE)
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean           @default(false)
  metadata            Json?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

enum SubscriptionTier {
  FREE
  BASIC
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}

enum TransactionType {
  SIGNUP_BONUS      // Initial 50 credits
  PURCHASE          // Credit purchase
  DEDUCTION_TEXT    // Text processing
  DEDUCTION_YOUTUBE // YouTube analysis
  DEDUCTION_IMAGE   // Image generation
  DEDUCTION_VIDEO   // Video generation
  REFUND            // Refund credits
  ADMIN_ADJUSTMENT  // Manual adjustment
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}